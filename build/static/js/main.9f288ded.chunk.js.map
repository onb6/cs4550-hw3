{"version":3,"sources":["game.js","App.js","reportWebVitals.js","index.js"],"names":["getRandomCode","_","shuffle","slice","join","getError","g","guesses","isNaN","length","x","Set","toString","split","size","includes","getResults","code","res","map","guess","b","i","charAt","c","getOneResult","YouLost","reset","className","onClick","YouWon","App","useState","dispError","state","setState","number","setNumber","w","results","e","console","log","n","newGuesses","concat","newGame","type","value","onChange","ev","val","target","onKeyUp","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f288ded.chunk.js","sourcesContent":["// a method that generates a random 4 digit code where all digits are unique\nexport function getRandomCode() {\n    let ints = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n    // eslint-disable-next-line no-undef\n    let four = _.shuffle(ints).slice(0, 4);\n    let code = four.join('');\n    return code;\n}\n\n// based on the guess and the previous guesses, determines whether it is a valid guess, and returns an error if not\nexport function getError(g, guesses) {\n    if (isNaN(g)) {\n        return \"Please input a number\";\n    } else if (g.length < 4) {\n        return \"Please input 4 digits\";\n    } else if (!areDigitsUnique(g)) {\n        return \"Four digits must be unique\";\n    } else if (guesses.includes(g)) {\n        return \"You already guessed that!\";\n    } else {\n        return \"\";\n    }\n}\n\n// determines whether or not all the digits in a number are unique\nfunction areDigitsUnique(x) {\n    return (new Set(x.toString().split(''))).size === x.length;\n}\n\n// creates the list of results based on the list of guesses and the code\nexport function getResults(guesses, code) {\n    let res = [];\n    if (guesses) {\n        // eslint-disable-next-line no-undef\n        res = _.map(guesses, guess => getOneResult(guess, code));\n    }\n    return res;\n}\n\n// gets the results of a guess when compared to the code (# of bulls and cows)\nfunction getOneResult(guess, code) {\n        let b = 0;\n        for (let i = 0; i < 4; i++) {\n            if (guess.charAt(i) === code.charAt(i)) {\n                b += 1;\n            }\n        }\n        let str = guess + code;\n        let c = (8 - new Set(str.split('')).size) - b;\n        return \"Bulls: \" + b + \", Cows: \" + c;\n}\n\n// has the user won?\nexport function win(guesses, code) {\n    return guesses.includes(code);\n}","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {useState} from 'react';\nimport {getRandomCode, getError, getResults, win} from \"./game\";\nimport 'lodash';\nimport 'bootstrap';\n\n// Displayed if the player loses\nfunction YouLost({reset}) {\n    return (\n        <div className=\"App\">\n            <div className=\"container\">\n                <h1>Loser!</h1>\n                <p>\n                    <button className=\"btn-info\" onClick={reset}>\n                        New Game\n                    </button>\n                </p>\n            </div>\n        </div>\n    );\n}\n\n// Displayed if the player wins\nfunction YouWon({reset}) {\n    return (\n        <div className=\"App\">\n            <div className=\"container\">\n                <h1>Congrats! You Won! :)</h1>\n                <p>\n                    <button className=\"btn-info\" onClick={reset}>\n                        New Game\n                    </button>\n                </p>\n            </div>\n        </div>\n    );\n}\n\nfunction App() {\n\n    // Game state\n    const [state, setState] = useState({\n        code: getRandomCode(),\n        guesses: [],\n        dispError: \"\"\n    })\n\n    // Control state for input\n    const [number, setNumber] = useState(\"\");\n\n    let w = win(state.guesses, state.code);\n    let results = getResults(state.guesses, state.code);\n    let e = getError(number, state.guesses);\n    let indices = [1, 2, 3, 4, 5, 6, 7, 8];\n\n    // verifies valid guess and then updates game state based on a user guess\n    function guess() {\n        console.log(state.code)\n        let n = number;\n        setNumber(\"\");\n\n        let newGuesses = state.guesses;\n        if (e === \"\") {\n            newGuesses = newGuesses.concat(n);\n        }\n        setState({code: state.code, guesses: newGuesses, dispError: e});\n    }\n\n    // resets game state to starting state\n    function newGame() {\n        setState({code: getRandomCode(), guesses: [], dispError: \"\"});\n    }\n\n    //mostly from \"updateText\" in lecture notes for Hangman\n    function updateNumber(ev) {\n        let val = ev.target.value;\n        if (val.length > 4) {\n            val = val.slice(0, 4);\n        }\n        setNumber(val);\n    }\n\n    // From lecture notes for Hangman\n    function keyUp(ev) {\n        if (ev.key === \"Enter\") {\n            guess();\n        }\n    }\n\n    // If the use has won, change the displayed component\n    if (w) {\n        return <YouWon reset={newGame}/>;\n    }\n\n    // From lecture notes for Hangman\n    if (state.guesses.length >= 8) {\n        return <YouLost reset={newGame}/>\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"container\">\n                <h1>4Digit Game!</h1><br/>\n                <p>\n                    <button className=\"btn-info\" onClick={newGame}>New Game</button>\n                    <br/><br/>\n                </p>\n                <div className=\"centered\">\n                    <p>Try to guess the secret code! Make a guess, you have eight tries to figure it out!</p>\n                    <p>Bulls are right numbers in the right place. Cows are right numbers in the wrong place.</p>\n                    <br/><br/>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-sm-4\"></div>\n                    <div className=\"col\">\n                        <p>Enter 4 digits to make a guess:</p>\n                        <input type=\"text\" value={number} onChange={updateNumber} onKeyUp={keyUp}/>\n                        <button className=\"btn-info\" onClick={guess}>Guess!</button>\n                        <p>{state.dispError}</p>\n                    </div>\n                    <div className=\"col-sm-1\">\n                        <div className=\"new-line\">\n                            {indices.join(\"\\n\")}\n                        </div>\n                    </div>\n                    <div className=\"col-sm-1\">\n                        <div className=\"new-line\">\n                            {state.guesses.join(\"\\n\")}\n                        </div>\n                    </div>\n                    <div className=\"col-sm-2\">\n                        <div className=\"new-line\">\n                            {results.join('\\n')}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}