{"ast":null,"code":"// a method that generates a random 4 digit code where all digits are unique\nexport function getRandomCode() {\n  return \"1234\";\n} // based on the guess and the previous guesses, determines whether it is a valid guess, and returns an error if not\n\nexport function getError(g, guesses) {\n  if (isNaN(g)) {\n    return \"Please input a number\";\n  } else if (g.length < 4) {\n    return \"Please input 4 digits\";\n  } else if (!areDigitsUnique(g)) {\n    return \"Four digits must be unique\";\n  } else if (guesses.includes(g)) {\n    return \"You already guessed that!\";\n  } else {\n    return \"\";\n  }\n} // determines whether or not all the digits in a number are unique\n\nfunction areDigitsUnique(x) {\n  return new Set(x.toString().split('')).size === x.length;\n} // creates the list of results based on the list of guesses and the code\n\n\nexport function getResults(guesses, code) {\n  let res = [];\n\n  if (guesses) {\n    // eslint-disable-next-line no-undef\n    res = _.map(guesses, guess => getOneResult(guess, code));\n  }\n\n  return res;\n} // gets the results of a guess when compared to the code (# of bulls and cows)\n\nfunction getOneResult(guess, code) {\n  let b = 0;\n  console.log(\"Hey there\");\n\n  for (let i = 0; i < 4; i++) {\n    if (guess.charAt(i) === code.charAt(i)) {\n      b += 1;\n    }\n  }\n\n  let str = guess + code;\n  let c = 8 - new Set(str.split('')).size - b; // console.log(b + \", \" + c);\n\n  return \"Bulls: \" + b + \", Cows: \" + c;\n}\n\nexport function userWon(guesses, code) {\n  if (guesses.includes(code)) {\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/Users/oliviablier/Documents/classes-spring21/webdev/assignment3/hw3/src/game.js"],"names":["getRandomCode","getError","g","guesses","isNaN","length","areDigitsUnique","includes","x","Set","toString","split","size","getResults","code","res","_","map","guess","getOneResult","b","console","log","i","charAt","str","c","userWon"],"mappings":"AAAA;AACA,OAAO,SAASA,aAAT,GAAyB;AAC5B,SAAO,MAAP;AACH,C,CAED;;AACA,OAAO,SAASC,QAAT,CAAkBC,CAAlB,EAAqBC,OAArB,EAA8B;AACjC,MAAIC,KAAK,CAACF,CAAD,CAAT,EAAc;AACV,WAAO,uBAAP;AACH,GAFD,MAEO,IAAIA,CAAC,CAACG,MAAF,GAAW,CAAf,EAAkB;AACrB,WAAO,uBAAP;AACH,GAFM,MAEA,IAAI,CAACC,eAAe,CAACJ,CAAD,CAApB,EAAyB;AAC5B,WAAO,4BAAP;AACH,GAFM,MAEA,IAAIC,OAAO,CAACI,QAAR,CAAiBL,CAAjB,CAAJ,EAAyB;AAC5B,WAAO,2BAAP;AACH,GAFM,MAEA;AACH,WAAO,EAAP;AACH;AACJ,C,CAED;;AACA,SAASI,eAAT,CAAyBE,CAAzB,EAA4B;AACxB,SAAQ,IAAIC,GAAJ,CAAQD,CAAC,CAACE,QAAF,GAAaC,KAAb,CAAmB,EAAnB,CAAR,CAAD,CAAkCC,IAAlC,KAA2CJ,CAAC,CAACH,MAApD;AACH,C,CAED;;;AACA,OAAO,SAASQ,UAAT,CAAoBV,OAApB,EAA6BW,IAA7B,EAAmC;AACtC,MAAIC,GAAG,GAAG,EAAV;;AACA,MAAIZ,OAAJ,EAAa;AACT;AACAY,IAAAA,GAAG,GAAGC,CAAC,CAACC,GAAF,CAAMd,OAAN,EAAee,KAAK,IAAIC,YAAY,CAACD,KAAD,EAAQJ,IAAR,CAApC,CAAN;AACH;;AACD,SAAOC,GAAP;AACH,C,CAED;;AACA,SAASI,YAAT,CAAsBD,KAAtB,EAA6BJ,IAA7B,EAAmC;AAC3B,MAAIM,CAAC,GAAG,CAAR;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,QAAIL,KAAK,CAACM,MAAN,CAAaD,CAAb,MAAoBT,IAAI,CAACU,MAAL,CAAYD,CAAZ,CAAxB,EAAwC;AACpCH,MAAAA,CAAC,IAAI,CAAL;AACH;AACJ;;AACD,MAAIK,GAAG,GAAGP,KAAK,GAAGJ,IAAlB;AACA,MAAIY,CAAC,GAAI,IAAI,IAAIjB,GAAJ,CAAQgB,GAAG,CAACd,KAAJ,CAAU,EAAV,CAAR,EAAuBC,IAA5B,GAAoCQ,CAA5C,CAV2B,CAW3B;;AACA,SAAO,YAAYA,CAAZ,GAAgB,UAAhB,GAA6BM,CAApC;AACP;;AAED,OAAO,SAASC,OAAT,CAAiBxB,OAAjB,EAA0BW,IAA1B,EAAgC;AACnC,MAAIX,OAAO,CAACI,QAAR,CAAiBO,IAAjB,CAAJ,EAA4B;AACxB,WAAO,IAAP;AACH;;AACD,SAAO,KAAP;AACH","sourcesContent":["// a method that generates a random 4 digit code where all digits are unique\nexport function getRandomCode() {\n    return \"1234\";\n}\n\n// based on the guess and the previous guesses, determines whether it is a valid guess, and returns an error if not\nexport function getError(g, guesses) {\n    if (isNaN(g)) {\n        return \"Please input a number\";\n    } else if (g.length < 4) {\n        return \"Please input 4 digits\";\n    } else if (!areDigitsUnique(g)) {\n        return \"Four digits must be unique\";\n    } else if (guesses.includes(g)) {\n        return \"You already guessed that!\";\n    } else {\n        return \"\";\n    }\n}\n\n// determines whether or not all the digits in a number are unique\nfunction areDigitsUnique(x) {\n    return (new Set(x.toString().split(''))).size === x.length;\n}\n\n// creates the list of results based on the list of guesses and the code\nexport function getResults(guesses, code) {\n    let res = [];\n    if (guesses) {\n        // eslint-disable-next-line no-undef\n        res = _.map(guesses, guess => getOneResult(guess, code));\n    }\n    return res;\n}\n\n// gets the results of a guess when compared to the code (# of bulls and cows)\nfunction getOneResult(guess, code) {\n        let b = 0;\n\n        console.log(\"Hey there\");\n        for (let i = 0; i < 4; i++) {\n            if (guess.charAt(i) === code.charAt(i)) {\n                b += 1;\n            }\n        }\n        let str = guess + code;\n        let c = (8 - new Set(str.split('')).size) - b;\n        // console.log(b + \", \" + c);\n        return \"Bulls: \" + b + \", Cows: \" + c;\n}\n\nexport function userWon(guesses, code) {\n    if (guesses.includes(code)) {\n        return true;\n    }\n    return false;\n}"]},"metadata":{},"sourceType":"module"}