{"ast":null,"code":"// a method that generates a random 4 digit code where all digits are unique\nexport function getRandomCode() {\n  return \"1234\";\n} // based on the guess and the previous guesses, determines whether it is a valid guess, and returns an error if not\n\nexport function getError(g, guesses) {\n  if (isNaN(g)) {\n    return \"Please input a number\";\n  } else if (g.length < 4) {\n    return \"Please input 4 digits\";\n  } else if (!areDigitsUnique(g)) {\n    return \"Four digits must be unique\";\n  } else if (guesses.includes(g)) {\n    return \"You already guessed that!\";\n  } else {\n    return \"\";\n  }\n} // determines whether or not all the digits in a number are unique\n\nfunction areDigitsUnique(x) {\n  return new Set(x.toString().split('')).size === x.length;\n}\n\nexport function getResults(guesses, code) {\n  let res = [];\n  console.log(\"Hey there\");\n  console.log(guesses.size);\n  console.log(guesses);\n\n  if (guesses.size > 0) {\n    console.log(\"From get results: \" + guesses); // eslint-disable-next-line no-undef\n\n    res = _.map(guesses, guess => getOneResult(guess, code));\n  }\n\n  console.log(res);\n  /*for (let i = 0; i < guesses.size; i++) {\n      let x = getOneResult(guesses[i], code);\n      res.concat(x);\n      //console.log(\"in loop\" + res);\n  }\n  //console.log(\"final\" + res);\n    */\n\n  return res;\n} // gets the results of a guess when compared to the code (# of bulls and cows)\n\nexport function getOneResult(guess, code) {\n  let b = 0;\n  console.log(\"Hey there\");\n\n  for (let i = 0; i < 4; i++) {\n    if (guess.charAt(i) === code.charAt(i)) {\n      b += 1;\n    }\n  }\n\n  let str = guess + code;\n  let c = 8 - new Set(str.split('')).size - b; // console.log(b + \", \" + c);\n\n  return \"Bulls: \" + b + \", Cows: \" + c;\n}\nexport function userWon(guesses, code) {\n  if (guesses.includes(code)) {\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/Users/oliviablier/Documents/classes-spring21/webdev/assignment3/hw3/src/game.js"],"names":["getRandomCode","getError","g","guesses","isNaN","length","areDigitsUnique","includes","x","Set","toString","split","size","getResults","code","res","console","log","_","map","guess","getOneResult","b","i","charAt","str","c","userWon"],"mappings":"AAAA;AACA,OAAO,SAASA,aAAT,GAAyB;AAC5B,SAAO,MAAP;AACH,C,CAED;;AACA,OAAO,SAASC,QAAT,CAAkBC,CAAlB,EAAqBC,OAArB,EAA8B;AACjC,MAAIC,KAAK,CAACF,CAAD,CAAT,EAAc;AACV,WAAO,uBAAP;AACH,GAFD,MAEO,IAAIA,CAAC,CAACG,MAAF,GAAW,CAAf,EAAkB;AACrB,WAAO,uBAAP;AACH,GAFM,MAEA,IAAI,CAACC,eAAe,CAACJ,CAAD,CAApB,EAAyB;AAC5B,WAAO,4BAAP;AACH,GAFM,MAEA,IAAIC,OAAO,CAACI,QAAR,CAAiBL,CAAjB,CAAJ,EAAyB;AAC5B,WAAO,2BAAP;AACH,GAFM,MAEA;AACH,WAAO,EAAP;AACH;AACJ,C,CAED;;AACA,SAASI,eAAT,CAAyBE,CAAzB,EAA4B;AACxB,SAAQ,IAAIC,GAAJ,CAAQD,CAAC,CAACE,QAAF,GAAaC,KAAb,CAAmB,EAAnB,CAAR,CAAD,CAAkCC,IAAlC,KAA2CJ,CAAC,CAACH,MAApD;AACH;;AAED,OAAO,SAASQ,UAAT,CAAoBV,OAApB,EAA6BW,IAA7B,EAAmC;AACtC,MAAIC,GAAG,GAAG,EAAV;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYd,OAAO,CAACS,IAApB;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAYd,OAAZ;;AACA,MAAIA,OAAO,CAACS,IAAR,GAAe,CAAnB,EAAsB;AAClBI,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBd,OAAnC,EADkB,CAElB;;AACAY,IAAAA,GAAG,GAAGG,CAAC,CAACC,GAAF,CAAMhB,OAAN,EAAeiB,KAAK,IAAIC,YAAY,CAACD,KAAD,EAAQN,IAAR,CAApC,CAAN;AACH;;AACDE,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI,SAAOA,GAAP;AACH,C,CAED;;AACA,OAAO,SAASM,YAAT,CAAsBD,KAAtB,EAA6BN,IAA7B,EAAmC;AAClC,MAAIQ,CAAC,GAAG,CAAR;AAEAN,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;;AACA,OAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,QAAIH,KAAK,CAACI,MAAN,CAAaD,CAAb,MAAoBT,IAAI,CAACU,MAAL,CAAYD,CAAZ,CAAxB,EAAwC;AACpCD,MAAAA,CAAC,IAAI,CAAL;AACH;AACJ;;AACD,MAAIG,GAAG,GAAGL,KAAK,GAAGN,IAAlB;AACA,MAAIY,CAAC,GAAI,IAAI,IAAIjB,GAAJ,CAAQgB,GAAG,CAACd,KAAJ,CAAU,EAAV,CAAR,EAAuBC,IAA5B,GAAoCU,CAA5C,CAVkC,CAWlC;;AACA,SAAO,YAAYA,CAAZ,GAAgB,UAAhB,GAA6BI,CAApC;AACP;AAED,OAAO,SAASC,OAAT,CAAiBxB,OAAjB,EAA0BW,IAA1B,EAAgC;AACnC,MAAIX,OAAO,CAACI,QAAR,CAAiBO,IAAjB,CAAJ,EAA4B;AACxB,WAAO,IAAP;AACH;;AACD,SAAO,KAAP;AACH","sourcesContent":["// a method that generates a random 4 digit code where all digits are unique\nexport function getRandomCode() {\n    return \"1234\";\n}\n\n// based on the guess and the previous guesses, determines whether it is a valid guess, and returns an error if not\nexport function getError(g, guesses) {\n    if (isNaN(g)) {\n        return \"Please input a number\";\n    } else if (g.length < 4) {\n        return \"Please input 4 digits\";\n    } else if (!areDigitsUnique(g)) {\n        return \"Four digits must be unique\";\n    } else if (guesses.includes(g)) {\n        return \"You already guessed that!\";\n    } else {\n        return \"\";\n    }\n}\n\n// determines whether or not all the digits in a number are unique\nfunction areDigitsUnique(x) {\n    return (new Set(x.toString().split(''))).size === x.length;\n}\n\nexport function getResults(guesses, code) {\n    let res = [];\n    console.log(\"Hey there\");\n    console.log(guesses.size);\n\n    console.log(guesses);\n    if (guesses.size > 0) {\n        console.log(\"From get results: \" + guesses);\n        // eslint-disable-next-line no-undef\n        res = _.map(guesses, guess => getOneResult(guess, code));\n    }\n    console.log(res);\n    /*for (let i = 0; i < guesses.size; i++) {\n        let x = getOneResult(guesses[i], code);\n        res.concat(x);\n        //console.log(\"in loop\" + res);\n    }\n    //console.log(\"final\" + res);\n\n     */\n    return res;\n}\n\n// gets the results of a guess when compared to the code (# of bulls and cows)\nexport function getOneResult(guess, code) {\n        let b = 0;\n\n        console.log(\"Hey there\");\n        for (let i = 0; i < 4; i++) {\n            if (guess.charAt(i) === code.charAt(i)) {\n                b += 1;\n            }\n        }\n        let str = guess + code;\n        let c = (8 - new Set(str.split('')).size) - b;\n        // console.log(b + \", \" + c);\n        return \"Bulls: \" + b + \", Cows: \" + c;\n}\n\nexport function userWon(guesses, code) {\n    if (guesses.includes(code)) {\n        return true;\n    }\n    return false;\n}"]},"metadata":{},"sourceType":"module"}