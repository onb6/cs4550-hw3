{"ast":null,"code":"// a method that generates a random 4 digit code where all digits are unique\nexport function getRandomCode(){var ints=[0,1,2,3,4,5,6,7,8,9];// eslint-disable-next-line no-undef\nvar four=_.shuffle(ints).slice(0,4);var code=four.join('');return code;}// based on the guess and the previous guesses, determines whether it is a valid guess, and returns an error if not\nexport function getError(g,guesses){if(isNaN(g)){return\"Please input a number\";}else if(g.length<4){return\"Please input 4 digits\";}else if(!areDigitsUnique(g)){return\"Four digits must be unique\";}else if(guesses.includes(g)){return\"You already guessed that!\";}else{return\"\";}}// determines whether or not all the digits in a number are unique\nfunction areDigitsUnique(x){return new Set(x.toString().split('')).size===x.length;}// creates the list of results based on the list of guesses and the code\nexport function getResults(guesses,code){var res=[];if(guesses){// eslint-disable-next-line no-undef\nres=_.map(guesses,function(guess){return getOneResult(guess,code);});}return res;}// gets the results of a guess when compared to the code (# of bulls and cows)\nfunction getOneResult(guess,code){var b=0;for(var i=0;i<4;i++){if(guess.charAt(i)===code.charAt(i)){b+=1;}}var str=guess+code;var c=8-new Set(str.split('')).size-b;return\"Bulls: \"+b+\", Cows: \"+c;}// has the user won?\nexport function win(guesses,code){return guesses.includes(code);}","map":{"version":3,"sources":["/Users/oliviablier/Documents/classes-spring21/webdev/assignment3/hw3/src/game.js"],"names":["getRandomCode","ints","four","_","shuffle","slice","code","join","getError","g","guesses","isNaN","length","areDigitsUnique","includes","x","Set","toString","split","size","getResults","res","map","guess","getOneResult","b","i","charAt","str","c","win"],"mappings":"AAAA;AACA,MAAO,SAASA,CAAAA,aAAT,EAAyB,CAC5B,GAAIC,CAAAA,IAAI,CAAG,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAa,CAAb,CAAgB,CAAhB,CAAmB,CAAnB,CAAsB,CAAtB,CAAyB,CAAzB,CAA4B,CAA5B,CAAX,CACA;AACA,GAAIC,CAAAA,IAAI,CAAGC,CAAC,CAACC,OAAF,CAAUH,IAAV,EAAgBI,KAAhB,CAAsB,CAAtB,CAAyB,CAAzB,CAAX,CACA,GAAIC,CAAAA,IAAI,CAAGJ,IAAI,CAACK,IAAL,CAAU,EAAV,CAAX,CACA,MAAOD,CAAAA,IAAP,CACH,CAED;AACA,MAAO,SAASE,CAAAA,QAAT,CAAkBC,CAAlB,CAAqBC,OAArB,CAA8B,CACjC,GAAIC,KAAK,CAACF,CAAD,CAAT,CAAc,CACV,MAAO,uBAAP,CACH,CAFD,IAEO,IAAIA,CAAC,CAACG,MAAF,CAAW,CAAf,CAAkB,CACrB,MAAO,uBAAP,CACH,CAFM,IAEA,IAAI,CAACC,eAAe,CAACJ,CAAD,CAApB,CAAyB,CAC5B,MAAO,4BAAP,CACH,CAFM,IAEA,IAAIC,OAAO,CAACI,QAAR,CAAiBL,CAAjB,CAAJ,CAAyB,CAC5B,MAAO,2BAAP,CACH,CAFM,IAEA,CACH,MAAO,EAAP,CACH,CACJ,CAED;AACA,QAASI,CAAAA,eAAT,CAAyBE,CAAzB,CAA4B,CACxB,MAAQ,IAAIC,CAAAA,GAAJ,CAAQD,CAAC,CAACE,QAAF,GAAaC,KAAb,CAAmB,EAAnB,CAAR,CAAD,CAAkCC,IAAlC,GAA2CJ,CAAC,CAACH,MAApD,CACH,CAED;AACA,MAAO,SAASQ,CAAAA,UAAT,CAAoBV,OAApB,CAA6BJ,IAA7B,CAAmC,CACtC,GAAIe,CAAAA,GAAG,CAAG,EAAV,CACA,GAAIX,OAAJ,CAAa,CACT;AACAW,GAAG,CAAGlB,CAAC,CAACmB,GAAF,CAAMZ,OAAN,CAAe,SAAAa,KAAK,QAAIC,CAAAA,YAAY,CAACD,KAAD,CAAQjB,IAAR,CAAhB,EAApB,CAAN,CACH,CACD,MAAOe,CAAAA,GAAP,CACH,CAED;AACA,QAASG,CAAAA,YAAT,CAAsBD,KAAtB,CAA6BjB,IAA7B,CAAmC,CAC3B,GAAImB,CAAAA,CAAC,CAAG,CAAR,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAG,CAApB,CAAuBA,CAAC,EAAxB,CAA4B,CACxB,GAAIH,KAAK,CAACI,MAAN,CAAaD,CAAb,IAAoBpB,IAAI,CAACqB,MAAL,CAAYD,CAAZ,CAAxB,CAAwC,CACpCD,CAAC,EAAI,CAAL,CACH,CACJ,CACD,GAAIG,CAAAA,GAAG,CAAGL,KAAK,CAAGjB,IAAlB,CACA,GAAIuB,CAAAA,CAAC,CAAI,EAAI,GAAIb,CAAAA,GAAJ,CAAQY,GAAG,CAACV,KAAJ,CAAU,EAAV,CAAR,EAAuBC,IAA5B,CAAoCM,CAA5C,CACA,MAAO,UAAYA,CAAZ,CAAgB,UAAhB,CAA6BI,CAApC,CACP,CAED;AACA,MAAO,SAASC,CAAAA,GAAT,CAAapB,OAAb,CAAsBJ,IAAtB,CAA4B,CAC/B,MAAOI,CAAAA,OAAO,CAACI,QAAR,CAAiBR,IAAjB,CAAP,CACH","sourcesContent":["// a method that generates a random 4 digit code where all digits are unique\nexport function getRandomCode() {\n    let ints = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n    // eslint-disable-next-line no-undef\n    let four = _.shuffle(ints).slice(0, 4);\n    let code = four.join('');\n    return code;\n}\n\n// based on the guess and the previous guesses, determines whether it is a valid guess, and returns an error if not\nexport function getError(g, guesses) {\n    if (isNaN(g)) {\n        return \"Please input a number\";\n    } else if (g.length < 4) {\n        return \"Please input 4 digits\";\n    } else if (!areDigitsUnique(g)) {\n        return \"Four digits must be unique\";\n    } else if (guesses.includes(g)) {\n        return \"You already guessed that!\";\n    } else {\n        return \"\";\n    }\n}\n\n// determines whether or not all the digits in a number are unique\nfunction areDigitsUnique(x) {\n    return (new Set(x.toString().split(''))).size === x.length;\n}\n\n// creates the list of results based on the list of guesses and the code\nexport function getResults(guesses, code) {\n    let res = [];\n    if (guesses) {\n        // eslint-disable-next-line no-undef\n        res = _.map(guesses, guess => getOneResult(guess, code));\n    }\n    return res;\n}\n\n// gets the results of a guess when compared to the code (# of bulls and cows)\nfunction getOneResult(guess, code) {\n        let b = 0;\n        for (let i = 0; i < 4; i++) {\n            if (guess.charAt(i) === code.charAt(i)) {\n                b += 1;\n            }\n        }\n        let str = guess + code;\n        let c = (8 - new Set(str.split('')).size) - b;\n        return \"Bulls: \" + b + \", Cows: \" + c;\n}\n\n// has the user won?\nexport function win(guesses, code) {\n    return guesses.includes(code);\n}"]},"metadata":{},"sourceType":"module"}